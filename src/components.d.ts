/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BrtConfig, BrtCoreConfig, BrtData } from "@bruit/types";
import { BruitIoConfig } from "./models/bruit-io-config.class";
export namespace Components {
    interface BruitCore {
        "config": BrtCoreConfig | string;
        /**
          * called on click on component init a feedback, wait user submit, send feedback
         */
        "newFeedback": (bruitIoConfig: BruitIoConfig, data?: Array<BrtData>, dataFn?: () => Array<BrtData> | Promise<Array<BrtData>>) => Promise<void>;
        "sendFeedback": (apiKey: any, agreement: any, data: any, dataFn: any) => Promise<any>;
    }
    interface BruitIo {
        "config": BrtConfig | string;
        /**
          * field array to add in feedback
         */
        "data": Array<BrtData>;
        /**
          * FN or PROMISE return field array to add in feedback
         */
        "dataFn": () => Array<BrtData> | Promise<Array<BrtData>>;
    }
    interface BruitRating {
        "color": string;
        "max": number;
        "offColor": string;
        "value": number;
    }
    interface BruitSelect {
        "id": string;
        "options": Array<string>;
        "required": boolean;
        "value": string;
    }
}
export interface BruitCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBruitCoreElement;
}
export interface BruitIoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBruitIoElement;
}
export interface BruitRatingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBruitRatingElement;
}
declare global {
    interface HTMLBruitCoreElement extends Components.BruitCore, HTMLStencilElement {
    }
    var HTMLBruitCoreElement: {
        prototype: HTMLBruitCoreElement;
        new (): HTMLBruitCoreElement;
    };
    interface HTMLBruitIoElement extends Components.BruitIo, HTMLStencilElement {
    }
    var HTMLBruitIoElement: {
        prototype: HTMLBruitIoElement;
        new (): HTMLBruitIoElement;
    };
    interface HTMLBruitRatingElement extends Components.BruitRating, HTMLStencilElement {
    }
    var HTMLBruitRatingElement: {
        prototype: HTMLBruitRatingElement;
        new (): HTMLBruitRatingElement;
    };
    interface HTMLBruitSelectElement extends Components.BruitSelect, HTMLStencilElement {
    }
    var HTMLBruitSelectElement: {
        prototype: HTMLBruitSelectElement;
        new (): HTMLBruitSelectElement;
    };
    interface HTMLElementTagNameMap {
        "bruit-core": HTMLBruitCoreElement;
        "bruit-io": HTMLBruitIoElement;
        "bruit-rating": HTMLBruitRatingElement;
        "bruit-select": HTMLBruitSelectElement;
    }
}
declare namespace LocalJSX {
    interface BruitCore {
        "config"?: BrtCoreConfig | string;
        /**
          * emit bruit-error on internal error or config error ex : BruitIo.addEventListener('onError',error=>...)
         */
        "onBrtError"?: (event: BruitCoreCustomEvent<any>) => void;
    }
    interface BruitIo {
        "config"?: BrtConfig | string;
        /**
          * field array to add in feedback
         */
        "data"?: Array<BrtData>;
        /**
          * FN or PROMISE return field array to add in feedback
         */
        "dataFn"?: () => Array<BrtData> | Promise<Array<BrtData>>;
        /**
          * emit bruit-error on internal error or config error ex : BruitIo.addEventListener('onError',error=>...)
         */
        "onBrtError"?: (event: BruitIoCustomEvent<any>) => void;
        "onReady"?: (event: BruitIoCustomEvent<any>) => void;
    }
    interface BruitRating {
        "color"?: string;
        "max"?: number;
        "offColor"?: string;
        "onValueChange"?: (event: BruitRatingCustomEvent<any>) => void;
        "value"?: number;
    }
    interface BruitSelect {
        "id"?: string;
        "options"?: Array<string>;
        "required"?: boolean;
        "value"?: string;
    }
    interface IntrinsicElements {
        "bruit-core": BruitCore;
        "bruit-io": BruitIo;
        "bruit-rating": BruitRating;
        "bruit-select": BruitSelect;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "bruit-core": LocalJSX.BruitCore & JSXBase.HTMLAttributes<HTMLBruitCoreElement>;
            "bruit-io": LocalJSX.BruitIo & JSXBase.HTMLAttributes<HTMLBruitIoElement>;
            "bruit-rating": LocalJSX.BruitRating & JSXBase.HTMLAttributes<HTMLBruitRatingElement>;
            "bruit-select": LocalJSX.BruitSelect & JSXBase.HTMLAttributes<HTMLBruitSelectElement>;
        }
    }
}
